package com.fengxiaoshuai.polymorphism;

public class BaseDemo {
    // 多态:同类型的对象,表现出来的不同形态。
    // 父类类型 对象名称 = 子类对象。
    // 多态前提:有继承关系,有父类引用指向子类,有方法重写。
    // 使用父类型作为参数,可以接收所有子类对象,体现多态的扩展性与便利。
    // 变量调用:编译看左边,运行也看左边。
    // 方法调用:编译看左边,运行看右边。

    // 在多态形式下,右边对象可以实现解耦合,便于扩展和维护。
    // 定义方法的时候,使用父类型作为参数,可以接收所有子类对象,体现多态的扩展性与便利。
    // 不能使用子类的特有功能。
    // 强制转换:可以转换成真正的子类类型,从而调用子类特有功能;转换对象与真实对象类型不一致会报错。
    // 转换的时候可以用instanceof关键字进行判断。
}
