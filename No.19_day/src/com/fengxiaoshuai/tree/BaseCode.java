package com.fengxiaoshuai.tree;

public class BaseCode {

    // 节点的内部结构(父节点地址、值、左子节点地址、右子节点地址)

    // 度:每一个节点的子节点数量。
    // 二叉树中,任意节点的度<=2。
    // 根节点:最顶层的节点。
    // 左子节点:左下方的节点。
    // 右子节点:右下方的节点。
    // 根节点的左子树/根节点的右子树

    // 二叉查找树(二叉排序树、二叉搜索树)
    // 每一个节点最多有两个子节点
    // 任意节点左子树的值都小于当前节点
    // 任意节点右子树的值都大于当前节点
    // 节点添加规则:小的存左边,大的存右边,一样的不存

    // 二叉树的遍历方式
    // 前序遍历:从根节点开始,然后按照当前节点->左子节点->右子节点的顺序遍历。
    // 中序遍历:从最左边的子节点开始,然后按照左子节点->当前节点->右子节点的顺序遍历。
    // 后序遍历:从最左边的子节点开始,然后按照左子节点->右子节点->当前节点的顺序遍历。
    // 层序遍历:从根节点开始一层一层的遍历。

    // 平衡二叉树:任意节点左右子树高度差不超过1。

    // 红黑树:一种自平衡的二叉查找树,是计算机科学中用到的一种数据结构。
    // 数据结构(红黑树)红黑规则
    // 每一个节点或是红色的,或者是黑色的
    // 根节点必须是黑色
    // 如果一个节点没有子节点或者是父节点,则该节点相应的指针属性值为Nil,这些Nil视为叶节点,每个叶节点(Nil)是黑色的
    // 如果某一个节点是红色的,那么它的子节点必须是黑色(不能出现两个红色节点相连的情况)
    // 对每一个节点,从该节点到其所有后代叶节点的简单路径上,均包含相同数目的黑色节点
    // 添加节点的规则:默认颜色(添加节点默认是红色的,效率高)
    // 红黑树增删改查的性能都很好。




}
